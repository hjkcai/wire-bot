#!/usr/bin/env node

const app = require('../src/app')
const path = require('path')
const https = require('https')
const config = require('../src/config')

// 从环境变量中读取端口
const port = normalizePort(process.env.PORT || config.port || '3000')

// 创建https服务器
const server = https.createServer({
  key: path.join(__dirname, '../ssl/server.key'),
  cert: path.join(__dirname, '../ssl/server.cert')
}, app.callback())

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port

  console.log('Listening on ' + bind)
}
